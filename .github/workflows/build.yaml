name: Build

on:
  - push

jobs:
  determine-matrix:
    name: Figure out the packages we need to build
    runs-on: ubuntu-latest

    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - name: Set up Git repository
        uses: actions/checkout@v2

      - name: Install the Nix package manager
        uses: cachix/install-nix-action@v10

      - id: set-matrix
        run: |
          echo "::set-output name=matrix::$(
            nix-instantiate --eval --json --strict \
              -E 'builtins.attrNames (import ./.).packages.x86_64-linux'
          )"

  build:
    name: Build documents
    needs: determine-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        packages: ${{fromJson(needs.determine-matrix.outputs.matrix)}}

    steps:
      - name: Set up Git repository
        uses: actions/checkout@v2

      - name: Install the Nix package manager
        uses: cachix/install-nix-action@v10

      - name: Build documents using Nix (${{ matrix.packages }})
        run: |
          document="$(echo $(nix-build --no-out-link -A \
            packages.x86_64-linux.${{ matrix.packages }})/*.pdf)"
          echo "::set-env name=DOCUMENT::$document"
          echo "::set-env name=DOCUMENT_NAME::$(basename "$document")"

      - name: Upload build assets for package ${{ matrix.packages }})
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.DOCUMENT_NAME }}
          path: ${{ env.DOCUMENT }}
          if-no-files-found: error

  release:
    name: "Create Github tag/pre-release"
    runs-on: ubuntu-latest
    needs: build
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Github pre-release (${{ needs.build.outputs.version }})
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.build.outputs.version }}
          release_name: Version ${{ needs.build.outputs.version }}
          draft: false
          prerelease: true

  assets:
    name: Upload release assets
    runs-on: ubuntu-latest
    needs: release
    strategy:
      matrix:
        assets:
          - source: ctfp-print.pdf
            destination: category-theory-for-programmers--print--
          - source: ctfp-reader.pdf
            destination: category-theory-for-programmers--
          - source: ctfp-print-scala.pdf
            destination: category-theory-for-programmers--print--scala--
          - source: ctfp-reader-scala.pdf
            destination: category-theory-for-programmers--reader--scala--
          - source: ctfp-print-ocaml.pdf
            destination: category-theory-for-programmers--print--ocaml--
          - source: ctfp-reader-ocaml.pdf
            destination: category-theory-for-programmers--reader--ocaml--
    steps:
      - name: Download build assets (${{ matrix.assets.source }})
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.assets.source }}
          path: ${{ matrix.assets.source }}

      - name: Upload release assets (${{ matrix.assets.destination }}${{ needs.build.outputs.version }}.pdf)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ${{ matrix.assets.source }}/${{ matrix.assets.source }}
          asset_name: ${{ matrix.assets.destination }}${{ needs.build.outputs.version }}.pdf
          asset_content_type: application/pdf
